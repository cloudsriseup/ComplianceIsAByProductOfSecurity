<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ind-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent" elementFormDefault="qualified" version="5.0">
	<xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-common-5" schemaLocation="oval-common-schema.xsd"/>
	<xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5" schemaLocation="oval-definitions-schema.xsd"/>
	<xsd:annotation>
		<xsd:documentation>The following is a description of the elements, types, and attributes that compose the tests found in Open Vulnerability and Assessment Language (OVAL) that are independent of a specific piece of software.  Each test is described in detail and should provide the information necessary to understand what each element and attribute represents.  This document is intended for developers and assumes some familiarity with XML.  A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is not outlined here.</xsd:documentation>
		<xsd:documentation>The OVAL Schema is maintained by The Mitre Corporation and developed by the public OVAL Community.  For more information, including how to get involved in the project and how to submit change requests, please visit the OVAL website at http://oval.mitre.org.</xsd:documentation>
		<xsd:appinfo>
			<schema>Independent Definition</schema>
			<version>5.0 release candidate 3</version>
			<date>26 May 2006</date>
			<sch:title>schematron validation of the Independent portion of an OVAL Definitions file</sch:title>
			<sch:ns prefix="oval-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
			<sch:ns prefix="ind-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent"/>
			<sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
		</xsd:appinfo>
	</xsd:annotation>
	<!-- =============================================================================== -->
	<!-- ================================  FAMILY TEST  ================================ -->
	<!-- =============================================================================== -->
	<xsd:element name="family_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>The family_test element is used to check the family a certain system belongs to.  This test basically allows the high level system types (window, unix, ios, etc.) to be tested.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references a family_object and the optional state element specifies the metadata to check.  The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern id="famtst">
					<sch:rule context="ind-def:family_test/ind-def:object">
						<sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/ind-def:family_object/@id"><value-of select="../@id"/> - the object child element of a family_test must reference a family_object</sch:assert>
					</sch:rule>
					<sch:rule context="ind-def:family_test/ind-def:state">
						<sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/ind-def:family_state/@id"><value-of select="../@id"/> - the state child element of a family_test must reference a family_state</sch:assert>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType">
					<xsd:sequence>
						<xsd:element name="object" type="oval-def:ObjectRefType" minOccurs="1" maxOccurs="1"/>
						<xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="1"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="family_object" substitutionGroup="oval-def:object">
		<xsd:annotation>
			<xsd:documentation>The family_object element is used by a family test to define those objects to evaluate based on a specified state.  There is actually only one object relating to family and this is the system as a whole.  Therefore, there are no child entities defined.  Any OVAL Test written to check the family will reference the same family_object which is basically an empty object element.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:ObjectType"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="family_state" substitutionGroup="oval-def:state">
		<xsd:annotation>
			<xsd:documentation>The family_state element contains a single entity that is used to check the family associated with the system.  The family is a high-level classification of system types.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:StateType">
					<xsd:sequence>
						<xsd:element name="family" type="ind-def:EntityStateFamilyType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>This element describes the high-level system OS type to test against.  Please refer to the definition of the EntityFamilyType for more information about the possible values..</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="famstefamily">
										<sch:rule context="ind-def:family_state/ind-def:family">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the family entity of a family_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the family entity of a family_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!-- =============================================================================== -->
	<!-- ===============================  FILE MD5 TEST  =============================== -->
	<!-- =============================================================================== -->
	<xsd:element name="filemd5_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>The file md5 test is used to check the md5 associated with a specified file.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references a filemd5_object and the optional state element specifies the md5 to check.  The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern id="md5tst">
					<sch:rule context="ind-def:filemd5_test/ind-def:object">
						<sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/ind-def:filemd5_object/@id"><value-of select="../@id"/> - the object child element of a filemd5_test must reference a filemd5_object</sch:assert>
					</sch:rule>
					<sch:rule context="ind-def:filemd5_test/ind-def:state">
						<sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/ind-def:filemd5_state/@id"><value-of select="../@id"/> - the state child element of a filemd5_test must reference a filemd5_state</sch:assert>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType">
					<xsd:sequence>
						<xsd:element name="object" type="oval-def:ObjectRefType" minOccurs="1" maxOccurs="1"/>
						<xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="1"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="filemd5_object" substitutionGroup="oval-def:object">
		<xsd:annotation>
			<xsd:documentation>The filemd5_object element is used by a file test to define the specific file(s) to be evaluated.  Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information.  The common set element allows complex objects to be created using filters and set logic.  Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
			<xsd:documentation>A file object defines the path and filename of the file(s).  In addition, a number of behaviors may be provided that help guide the collection of objects.  Please refer to the Filemd5Behaviors complex type for more information about specific behaviors.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:ObjectType">
					<xsd:sequence>
						<xsd:choice minOccurs="1" maxOccurs="1">
							<xsd:element ref="oval-def:set"/>
							<xsd:sequence>
								<xsd:element name="behaviors" type="ind-def:Filemd5Behaviors" minOccurs="0" maxOccurs="1"/>
								<xsd:element name="path" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="md5objpath">
												<sch:rule context="ind-def:filemd5_object/ind-def:path">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the path entity of a filemd5_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the path entity of a filemd5_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
								<xsd:element name="filename" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>The filename element specifies the name of the file.  If the nillable attribute is set to true, then the object being specified is the higher level path.  In this case, the filename element should not be collected or used in analysis.  Setting nil equal to true is different than using a .* pattern match, says to collect every file under a given path.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="md5objfilename">
												<sch:rule context="ind-def:filemd5_object/ind-def:filename">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the filename entity of a filemd5_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the filename entity of a filemd5_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
							</xsd:sequence>
						</xsd:choice>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="filemd5_state" substitutionGroup="oval-def:state">
		<xsd:annotation>
			<xsd:documentation>The filemd5_state element contains entities that are used to check the file path, name, and the md5 associated with a specific file.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:StateType">
					<xsd:sequence>
						<xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The path element specifies the absolute path to a file on the machine.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="md5stepath">
										<sch:rule context="ind-def:filemd5_state/ind-def:path">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the path entity of a filemd5_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the path entity of a filemd5_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="md5stefilename">
										<sch:rule context="ind-def:filemd5_state/ind-def:filename">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the filename entity of a filemd5_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the filename entity of a filemd5_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="md5" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The md5 element is the md5 hash of the file.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="md5stemd5">
										<sch:rule context="ind-def:filemd5_state/ind-def:md5">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the md5 entity of a filemd5_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the md5 entity of a filemd5_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="Filemd5Behaviors">
		<xsd:annotation>
			<xsd:documentation>The Filemd5Behaviors complex type defines a number of behaviors that allow a more detailed definition of the filemd5_object being specified.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="max_depth" use="optional" default="1">
			<xsd:annotation>
				<xsd:documentation>'max_depth' defines how many directories to recurse when a recures direction is specified.  The default value is '-1' meaning no limitation.  A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:integer">
					<xsd:fractionDigits value="0"></xsd:fractionDigits>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="recurse_direction" use="optional" default="none">
			<xsd:annotation>
				<xsd:documentation>'recurse_direction' defines the direction to recurse, either 'up' to parent directories, or 'down' into child directories.  The default value is 'none' for no recursion.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="up"/>
					<xsd:enumeration value="down"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>
	<!-- =============================================================================== -->
	<!-- =======================  ENVIRONMENT VARIABLE TEST  =========================== -->
	<!-- =============================================================================== -->
	<xsd:element name="environmentvariable_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>The environmentvariable_test element is used to check an environment variable found on the system.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references a environmentvariable_object and the optional state element specifies the metadata to check.  The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern id="envtst">
					<sch:rule context="ind-def:environmentvariable_test/ind-def:object">
						<sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/ind-def:environmentvariable_object/@id"><value-of select="../@id"/> - the object child element of an environmentvariable_test must reference a environmentvariable_object</sch:assert>
					</sch:rule>
					<sch:rule context="ind-def:environmentvariable_test/ind-def:state">
						<sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/ind-def:environmentvariable_state/@id"><value-of select="../@id"/> - the state child element of an environmentvariable_test must reference a environmentvariable_state</sch:assert>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType">
					<xsd:sequence>
						<xsd:element name="object" type="oval-def:ObjectRefType" minOccurs="1" maxOccurs="1"/>
						<xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="1"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="environmentvariable_object" substitutionGroup="oval-def:object">
		<xsd:annotation>
			<xsd:documentation>The environmentvariable_object element is used by an environment variable test to define the specific environment variable(s) to be evaluated.  Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information.  The common set element allows complex objects to be created using filters and set logic.  Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:ObjectType">
					<xsd:sequence>
						<xsd:choice minOccurs="1" maxOccurs="1">
							<xsd:element ref="oval-def:set" minOccurs="0" maxOccurs="1"/>
							<xsd:sequence minOccurs="0" maxOccurs="1">
								<xsd:element name="name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>This element describes the name of an environment variable.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="envobjname">
												<sch:rule context="ind-def:environmentvariable_object/ind-def:name">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the name entity of an environmentvariable_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the name entity of an environmentvariable_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
							</xsd:sequence>
						</xsd:choice>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="environmentvariable_state" substitutionGroup="oval-def:state">
		<xsd:annotation>
			<xsd:documentation>The environmentvariable_state element contains two entities that are used to check the name of the specified environment varible and the value associated with it.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:StateType">
					<xsd:sequence>
						<xsd:element name="name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>This element describes the name of an environment variable.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="envstename">
										<sch:rule context="ind-def:environmentvariable_state/ind-def:name">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the name entity of an environmentvariable_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the name entity of an environmentvariable_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="value" type="oval-def:EntityStateAnyType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The actual value of the specified environment variable.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="envstevalue">
										<sch:rule context="ind-def:environmentvariable_state/ind-def:value">
											<sch:assert test="((@datatype='binary' and (not(@operation) or @operation='equals' or @operation='not equal')) or (@datatype='bool' and (not(@operation) or @operation='equals' or @operation='not equal')) or (@datatype='float' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or (@datatype='int' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or ((@datatype='string' or not(@datatype)) and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match')) or (@datatype='version' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')))"><value-of select="../@id"/> - the supplied operation attribute for the value entity of an environmentvariable_state is not valid given a datatype of '<value-of select="@datatype"/>'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!-- =============================================================================== -->
	<!-- ===========================  TEXT FILE CONTENT TEST  ========================== -->
	<!-- =============================================================================== -->
	<xsd:element name="textfilecontent_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>The textfilecontent_test element is used to check the contents of a text file (aka a configuration file) by looking at individual lines.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references a textfilecontent_object and the optional state element specifies the metadata to check.  The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern id="txttst">
					<sch:rule context="ind-def:textfilecontent_test/ind-def:object">
						<sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/ind-def:textfilecontent_object/@id"><value-of select="../@id"/> - the object child element of a textfilecontent_test must reference a textfilecontent_object</sch:assert>
					</sch:rule>
					<sch:rule context="ind-def:textfilecontent_test/ind-def:state">
						<sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/ind-def:textfilecontent_state/@id"><value-of select="../@id"/> - the state child element of a textfilecontent_test must reference a textfilecontent_state</sch:assert>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType">
					<xsd:sequence>
						<xsd:element name="object" type="oval-def:ObjectRefType" minOccurs="1" maxOccurs="1"/>
						<xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="1"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="textfilecontent_object" substitutionGroup="oval-def:object">
		<xsd:annotation>
			<xsd:documentation>The textfilecontent_object element is used by a text file content test to define the specific line(s) of a file(s) to be evaluated.  Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information.  The common set element allows complex objects to be created using filters and set logic.  Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:ObjectType">
					<xsd:sequence>
						<xsd:choice minOccurs="1" maxOccurs="1">
							<xsd:element ref="oval-def:set" minOccurs="0" maxOccurs="1"/>
							<xsd:sequence minOccurs="0" maxOccurs="1">
								<xsd:element name="behaviors" type="ind-def:TextfilecontentBehaviors" minOccurs="0" maxOccurs="1"/>
								<xsd:element name="path" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>Specifies the absolute path to a file on the machine, not including the filename.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="txtobjpath">
												<sch:rule context="ind-def:textfilecontent_object/ind-def:path">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the path entity of a textfilecontent_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the path entity of a textfilecontent_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
								<xsd:element name="filename" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="txtobjfilename">
												<sch:rule context="ind-def:textfilecontent_object/ind-def:filename">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the filename entity of a textfilecontent_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the filename entity of a textfilecontent_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
								<xsd:element name="line" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>The line element represents a line in the file and is represented using a regular expression.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="txtobjline">
												<sch:rule context="ind-def:textfilecontent_object/ind-def:line">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the line entity of a textfilecontent_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the line entity of a textfilecontent_object should be 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
							</xsd:sequence>
						</xsd:choice>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="textfilecontent_state" substitutionGroup="oval-def:state">
		<xsd:annotation>
			<xsd:documentation>The textfilecontent_state element contains entities that are used to check the file path and name, as well as the line in question and the value of the specific subexpression.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:StateType">
					<xsd:sequence>
						<xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>Specifies the absolute path to a file on the machine.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="txtstepath">
										<sch:rule context="ind-def:textfilecontent_state/ind-def:path">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the path entity of a textfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the path entity of a textfilecontent_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The name of the file.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="txtstefilename">
										<sch:rule context="ind-def:textfilecontent_state/ind-def:filename">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the filename entity of a textfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the filename entity of a textfilecontent_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="line" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The line element represents a line in the file that was collected.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="txtsteline">
										<sch:rule context="ind-def:textfilecontent_state/ind-def:line">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the line entity of a textfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal'"><value-of select="../@id"/> - operation attribute for the line entity of a textfilecontent_state should be 'equals', or 'not equal'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="subexpression" type="oval-def:EntityStateAnyType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>Each subexpression in the regular expression of the line element is then tested against the value specified in the subexpression element.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="txtstesubexpression">
										<sch:rule context="ind-def:registry_state/ind-def:subexpression">
											<sch:assert test="((@datatype='binary' and (not(@operation) or @operation='equals' or @operation='not equal')) or (@datatype='bool' and (not(@operation) or @operation='equals' or @operation='not equal')) or (@datatype='float' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or (@datatype='int' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or ((@datatype='string' or not(@datatype)) and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match')) or (@datatype='version' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')))"><value-of select="../@id"/> - the supplied operation attribute for the subexpression entity of a textfilecontent_state is not valid given a datatype of '<value-of select="@datatype"/>'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="TextfilecontentBehaviors">
		<xsd:annotation>
			<xsd:documentation>The TextfilecontentBehaviors complex type defines a number of behaviors that allow a more detailed definition of the textfilecontentBehaviors_object being specified.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="max_depth" use="optional" default="1">
			<xsd:annotation>
				<xsd:documentation>'max_depth' defines how many directories to recurse when a recures direction is specified.  The default value is '-1' meaning no limitation.  A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:integer">
					<xsd:fractionDigits value="0"></xsd:fractionDigits>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="recurse_direction" use="optional" default="none">
			<xsd:annotation>
				<xsd:documentation>'recurse_direction' defines the direction to recurse, either 'up' to parent directories, or 'down' into child directories.  The default value is 'none' for no recursion.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="up"/>
					<xsd:enumeration value="down"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>
	<!-- =============================================================================== -->
	<!-- ===============================  UNKNOWN TEST  ================================ -->
	<!-- =============================================================================== -->
	<xsd:element name="unknown_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>An unknown test acts as a placeholder for tests whose implementation is unknown.  Any information that is known about the test should be held in the notes child element that is available through the extension of the abstract test element.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  Note that for an unknown test, the required check attribute that is part of the extended TestType should be ignored during evaluation and hence can be set to any valid value.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!-- =============================================================================== -->
	<!-- ===============================  VARIABLE TEST  =============================== -->
	<!-- =============================================================================== -->
	<xsd:element name="variable_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>The variable test allows the value of a variable to be compared to a defined value.  As an example one might use this test to validate that a variable being passed in from an external source falls within a specified range.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references a variable_object and the optional state element specifies the value to check.  The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern id="vattst">
					<sch:rule context="ind-def:variable_test/ind-def:object">
						<sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/ind-def:variable_object/@id"><value-of select="../@id"/> - the object child element of a variable_test must reference a variable_object</sch:assert>
					</sch:rule>
					<sch:rule context="ind-def:variable_test/ind-def:state">
						<sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/ind-def:variable_state/@id"><value-of select="../@id"/> - the state child element of a variable_test must reference a variable_state</sch:assert>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType">
					<xsd:sequence>
						<xsd:element name="object" type="oval-def:ObjectRefType" minOccurs="1" maxOccurs="1"/>
						<xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="1"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="variable_object" substitutionGroup="oval-def:object">
		<xsd:annotation>
			<xsd:documentation></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:ObjectType">
					<xsd:sequence>
						<xsd:choice minOccurs="1" maxOccurs="1">
							<xsd:element ref="oval-def:set" minOccurs="0" maxOccurs="1"/>
							<xsd:sequence minOccurs="0" maxOccurs="1">
								<xsd:element name="var_ref" type="ind-def:EntityObjectVariableRefType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>The id of the variable you want.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="varobjvar_ref">
												<sch:rule context="ind-def:variable_object/ind-def:var_ref">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the var_ref entity of a variable_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the var_ref entity of a variable_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
							</xsd:sequence>
						</xsd:choice>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="variable_state" substitutionGroup="oval-def:state">
		<xsd:annotation>
			<xsd:documentation>The variable_state element contains two entities that are used to check the var_ref of the specified varible and the value associated with it.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:StateType">
					<xsd:sequence>
						<xsd:element name="var_ref" type="ind-def:EntityStateVariableRefType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The id of the variable.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="varstevar_ref">
										<sch:rule context="ind-def:variable_state/ind-def:var_ref">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the var_ref entity of a variable_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the var_ref entity of a variable_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="value" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The value of the variable.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="varstevalue">
										<sch:rule context="ind-def:variable_state/ind-def:value">
											<sch:assert test="((@datatype='binary' and (not(@operation) or @operation='equals' or @operation='not equal')) or (@datatype='bool' and (not(@operation) or @operation='equals' or @operation='not equal')) or (@datatype='evr_string' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or'))or (@datatype='float' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or (@datatype='ios_version' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or (@datatype='int' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')) or ((@datatype='string' or not(@datatype)) and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match')) or (@datatype='version' and (not(@operation) or @operation='equals' or @operation='not equal' or @operation='greater than' or @operation='greater than or equal' or @operation='less than' or @operation='less than or equal' or @operation='bitwise and' or @operation='bitwise or')))"><value-of select="../@id"/> - the supplied operation attribute for the value entity of a variable_state is not valid given a datatype of '<value-of select="@datatype"/>'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<!-- =============================================================================== -->
	<!-- ===========================  XML FILE CONTENT TEST  =========================== -->
	<!-- =============================================================================== -->
	<xsd:element name="xmlfilecontent_test" substitutionGroup="oval-def:test">
		<xsd:annotation>
			<xsd:documentation>The xmlfilecontent_test element is used to explore the contents of an xml file.  This test basically allows specific pieces of an xml document specified using xpath to be tested.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description for more information.  The required object element references a family_object and the optional state element specifies the metadata to check.  The evaluation of the test is guided by the check attribute that is inherited from the TestType.</xsd:documentation>
			<xsd:appinfo>
				<sch:pattern id="xmltst">
					<sch:rule context="ind-def:xmlfilecontent_test/ind-def:object">
						<sch:assert test="@object_ref=/oval-def:oval_definitions/oval-def:objects/ind-def:xmlfilecontent_object/@id"><value-of select="../@id"/> - the object child element of a xmlfilecontent_test must reference a xmlfilecontent_object</sch:assert>
					</sch:rule>
					<sch:rule context="ind-def:xmlfilecontent_test/ind-def:state">
						<sch:assert test="@state_ref=/oval-def:oval_definitions/oval-def:states/ind-def:xmlfilecontent_state/@id"><value-of select="../@id"/> - the state child element of a xmlfilecontent_test must reference a xmlfilecontent_state</sch:assert>
					</sch:rule>
				</sch:pattern>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:TestType">
					<xsd:sequence>
						<xsd:element name="object" type="oval-def:ObjectRefType" minOccurs="1" maxOccurs="1"/>
						<xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="1"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="xmlfilecontent_object" substitutionGroup="oval-def:object">
		<xsd:annotation>
			<xsd:documentation>The xmlfilecontent_object element is used by a xml file content test to define the specific piece of an xml file(s) to be evaluated.  Each object extends the standard ObjectType as definied in the oval-definitions-schema and one should refer to the ObjectType description for more information.  The common set element allows complex objects to be created using filters and set logic.  Again, please refer to the description of the set element in the oval-definitions-schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:ObjectType">
					<xsd:sequence>
						<xsd:choice minOccurs="1" maxOccurs="1">
							<xsd:element ref="oval-def:set" minOccurs="0" maxOccurs="1"/>
							<xsd:sequence minOccurs="0" maxOccurs="1">
								<xsd:element name="behaviors" type="ind-def:XmlfilecontentBehaviors" minOccurs="0" maxOccurs="1"/>
								<xsd:element name="path" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>Specifies the absolute path to a file on the machine.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="xmlobjpath">
												<sch:rule context="ind-def:xmlfilecontent_object/ind-def:path">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the path entity of a xmlfilecontent_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the path entity of a xmlfilecontent_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
								<xsd:element name="filename" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="xmlobjfilename">
												<sch:rule context="ind-def:xmlfilecontent_object/ind-def:filename">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the filename entity of a xmlfilecontent_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the filename entity of a xmlfilecontent_object should be 'equals', 'not equal', or 'pattern match'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
								<xsd:element name="xpath" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
									<xsd:annotation>
										<xsd:documentation>Specifies an Xpath expression describing the nodes to look at.  The only valid operator for xpath is equals since there is an infinite number of possible xpaths and determinining all those that do not equal a give xpath would be impossible.</xsd:documentation>
										<xsd:appinfo>
											<sch:pattern id="xmlobjxpath">
												<sch:rule context="ind-def:xmlfilecontent_object/ind-def:xpath">
													<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the xpath entity of a xmlfilecontent_object should be 'string'</sch:assert>
													<sch:assert test="not(@operation) or @operation='equals'"><value-of select="../@id"/> - operation attribute for the xpath entity of a xmlfilecontent_object should be 'equals'</sch:assert>
												</sch:rule>
											</sch:pattern>
										</xsd:appinfo>
									</xsd:annotation>
								</xsd:element>
							</xsd:sequence>
						</xsd:choice>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="xmlfilecontent_state" substitutionGroup="oval-def:state">
		<xsd:annotation>
			<xsd:documentation>The xmlfilecontent_state element contains entities that are used to check the file path and name, as well as the xpath used and the value of the this xpath.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="oval-def:StateType">
					<xsd:sequence>
						<xsd:element name="path" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>Specifies the absolute path to a file on the machine.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="xmlstepath">
										<sch:rule context="ind-def:xmlfilecontent_state/ind-def:path">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the path entity of a xmlfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the path entity of a xmlfilecontent_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="filename" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The filename element specifies the name of the file.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="xmlstefilename">
										<sch:rule context="ind-def:xmlfilecontent_state/ind-def:filename">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the filename entity of a xmlfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the filename entity of a xmlfilecontent_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="xpath" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>Specifies an Xpath expression describing the nodes to look at.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="xmlstexpath">
										<sch:rule context="ind-def:xmlfilecontent_state/ind-def:xpath">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the xpath entity of a xmlfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal'"><value-of select="../@id"/> - operation attribute for the xpath entity of a xmlfilecontent_state should be 'equals', or 'not equal'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="value_of" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:documentation>The value element checks the value of the nodes found.</xsd:documentation>
								<xsd:appinfo>
									<sch:pattern id="xmlstevalue_of">
										<sch:rule context="ind-def:xmlfilecontent_state/ind-def:value_of">
											<sch:assert test="not(@datatype) or @datatype='string'"><value-of select="../@id"/> - datatype attribute for the value_of entity of a xmlfilecontent_state should be 'string'</sch:assert>
											<sch:assert test="not(@operation) or @operation='equals' or @operation='not equal' or @operation='pattern match'"><value-of select="../@id"/> - operation attribute for the value_of entity of a xmlfilecontent_state should be 'equals', 'not equal', or 'pattern match'</sch:assert>
										</sch:rule>
									</sch:pattern>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:complexType name="XmlfilecontentBehaviors">
		<xsd:annotation>
			<xsd:documentation>The XmlfilecontentBehaviors complex type defines a number of behaviors that allow a more detailed definition of the xmlfilecontentBehaviors_object being specified.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="max_depth" use="optional" default="1">
			<xsd:annotation>
				<xsd:documentation>'max_depth' defines how many directories to recurse when a recures direction is specified.  The default value is '-1' meaning no limitation.  A value of '0' is equivalent to no recursion, '1' means to step only one directory level up/down, and so on.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:integer">
					<xsd:fractionDigits value="0"></xsd:fractionDigits>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="recurse_direction" use="optional" default="none">
			<xsd:annotation>
				<xsd:documentation>'recurse_direction' defines the direction to recurse, either 'up' to parent directories, or 'down' into child directories.  The default value is 'none' for no recursion.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="none"/>
					<xsd:enumeration value="up"/>
					<xsd:enumeration value="down"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>
	<!-- =============================================================================== -->
	<!-- =============================================================================== -->
	<!-- =============================================================================== -->
	<xsd:complexType name="EntityStateFamilyType">
		<xsd:annotation>
			<xsd:documentation>The EntityStateFamilyType complex type defines a string entity value that is restricted to a set of enumerations.  Each valid enumeration is a high-level family of system operating system.  The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:restriction base="oval-def:EntityStateStringType">
				<xsd:enumeration value="ios"/>
				<xsd:enumeration value="macos"/>
				<xsd:enumeration value="unix"/>
				<xsd:enumeration value="windows"/>
				<xsd:enumeration value=""/>
			</xsd:restriction>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="EntityObjectVariableRefType">
		<xsd:annotation>
			<xsd:documentation>The EntityObjectVariableRefType complex type defines a string object entity that has a valid OVAL variable id as the value.  The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:restriction base="oval-def:EntityObjectStringType">
				<xsd:pattern value="(oval:[A-Za-z\-\.]+:var:[1-9][0-9]*){0,}"/>
			</xsd:restriction>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="EntityStateVariableRefType">
		<xsd:annotation>
			<xsd:documentation>The EntityStateVariableRefType complex type defines a string state entity that has a valid OVAL variable id as the value.  The empty string is also allowed to support empty emlement associated with variable references.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:restriction base="oval-def:EntityStateStringType">
				<xsd:pattern value="(oval:[A-Za-z\-\.]+:var:[1-9][0-9]*){0,}"/>
			</xsd:restriction>
		</xsd:simpleContent>
	</xsd:complexType>
</xsd:schema>